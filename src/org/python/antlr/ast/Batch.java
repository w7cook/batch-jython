// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.Batch", base = AST.class)
public class Batch extends stmt {
public static final PyType TYPE = PyType.fromClass(Batch.class);
    private String remote;
    private expr service;
    private java.util.List<stmt> body;
    
    public String getInternalRemote() {
        return remote;
    }
    @ExposedGet(name = "remote")
    public PyObject getRemote() {
        return new PyString(null, remote);
    }
    @ExposedSet(name = "remote")
    public void setRemote(PyObject remote) {
        this.remote = remote.toString();
    }
    public expr getInternalService() {
        return service;
    }
    @ExposedGet(name = "service")
    public PyObject getService() {
        return service;
    }
    @ExposedSet(name = "service")
    public void setService(PyObject service) {
        this.service = AstAdapters.py2expr(service);
    }
    public java.util.List<stmt> getInternalBody() {
        return body;
    }
    @ExposedGet(name = "body")
    public PyObject getBody() {
        return new AstList(body, AstAdapters.stmtAdapter);
    }
    @ExposedSet(name = "body")
    public void setBody(PyObject body) {
        this.body = AstAdapters.py2stmtList(body);
    }
    
    private final static PyString[] attributes = 
    new PyString[] {new PyString("lineno"), new PyString("col_offset")};
    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() { return attributes; }
    
    public Batch(PyType subType) {
        super(subType);
    }
    public Batch() {
        this(TYPE);
    }
    @ExposedNew
    @ExposedMethod
    public void Batch___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("Batch", args, keywords, new String[]
            {"body", "lineno", "col_offset"}, 1, true);
        setBody(ap.getPyObject(0, Py.None));
        int lin = ap.getInt(3, -1);
        // Check this part...
        if (lin != -1) {
            setLineno(lin);
        }
         
        int col = ap.getInt(4, -1);
        if (col != -1) {
            setLineno(col);
        }
    }
    
    public Batch(PyObject remote, PyObject service, PyObject body) {
        setRemote(remote);
        setService(service);
        setBody(body);
    }
    
    public Batch(Token token, String remote, expr service, java.util.List<stmt> body) {
        super(token);
        this.remote = remote;
        this.service = service;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
    }
    
    public Batch(Integer ttype, Token token, String remote, expr service, java.util.List<stmt> body) {
        super(ttype, token);
        this.remote = remote;
        this.service = service;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
    }
    
    public Batch(PythonTree tree, String remote, expr service, java.util.List<stmt> body) {
        super(tree);
        this.remote = remote;
        this.service = service;
        this.body = body;
        if (body == null) {
            this.body = new ArrayList<stmt>();
        }
        for (PythonTree t : this.body) {
            addChild(t);
        }
    }
    
    @ExposedGet(name = "repr")
    public String toString() {
        return "Batch";
    }
    
    public String toStringTree() {
        StringBuffer sb = new StringBuffer("Batch(");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(")");
        return sb.toString();
    }
    
    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitBatch(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (body != null) {
            for (PythonTree t : body) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    private int lineno = -1;
    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }
    
    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }
    
    private int col_offset = -1;
    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }
    
    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }
    
}

